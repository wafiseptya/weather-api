{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","items","_this2","fetch","then","res","json","parsedJSON","list","map","data","dateTime","concat","dt_txt","temp","main","tempMin","temp_min","tempMax","temp_max","weather","setState","isLoaded","catch","error","console","log","react_default","a","createElement","className","length","item","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uKCyEzBC,2BAnEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAQ,IAHOR,mFAOC,IAAAS,EAAAN,KAClBO,MAAM,kIACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAU,OAAIA,EAAWC,KAAKC,IAAI,SAAAC,GAAI,MAC1C,CACEC,SAAQ,GAAAC,OAAKF,EAAKG,QAClBC,KAAI,GAAAF,OAAKF,EAAKK,KAAKD,MACnBE,QAAO,GAAAJ,OAAKF,EAAKK,KAAKE,UACtBC,QAAO,GAAAN,OAAKF,EAAKK,KAAKI,UACtBC,QAAO,GAAAR,OAAKF,EAAKU,QAAQ,GAAGL,WAI/BX,KAAK,SAAAH,GAAK,OAAIC,EAAKmB,SAAS,CAC3BpB,QACAqB,UAAU,MAEXC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,iBAAkBF,sCAEzC,IACAvB,EAASL,KAAKI,MAAdC,MAEP,OACE0B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,8BACAH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,iCACfH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,eACfH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,uBAGJF,EAAAC,EAAAC,cAAA,aAEI5B,EAAM8B,OAAS,EAAI9B,EAAMQ,IAAI,SAAAuB,GAAQ,IAC5BrB,EAA6CqB,EAA7CrB,SAAUG,EAAmCkB,EAAnClB,KAAMI,EAA6Bc,EAA7Bd,QAASF,EAAoBgB,EAApBhB,QAASI,EAAWY,EAAXZ,QACzC,OACEO,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKlB,GACLgB,EAAAC,EAAAC,cAAA,UAAKf,GACLa,EAAAC,EAAAC,cAAA,UAAKX,GACLS,EAAAC,EAAAC,cAAA,UAAKb,GACLW,EAAAC,EAAAC,cAAA,UAAKT,MAGN,gBA1DHa,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.42e8dc23.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      items : []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.openweathermap.org/data/2.5/forecast?q=Yogyakarta,id&mode=json&appid=c2d4d0d1e7e657a4350ffc7fded03b6e&units=metric\")\n      .then(res => res.json())\n      .then(parsedJSON => parsedJSON.list.map(data => (\n        {\n          dateTime: `${data.dt_txt}` ,\n          temp: `${data.main.temp}` ,\n          tempMin: `${data.main.temp_min}` ,\n          tempMax: `${data.main.temp_max}` ,\n          weather: `${data.weather[0].main}` ,\n\n        }\n      )))\n      .then(items => this.setState({\n        items,\n        isLoaded: false\n      }))\n      .catch(error => console.log('parsing failed', error))\n  }\n  render() {\n    const {items} = this.state;\n\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <h1 className=\"text-center mb-3 w-100\">Prakiraan Cuaca Yogyakarta</h1>\n          <table className=\"table table-hover table-hover\">\n            <thead className=\"thead-light\">\n              <tr>\n                <th>Date Time</th>\n                <th>Temp</th>\n                <th>Temp Min</th>\n                <th>Temp Max</th>\n                <th>Weather</th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                items.length > 0 ? items.map(item => {\n                  const {dateTime, temp, tempMax, tempMin, weather} = item;\n                  return(\n                    <tr>\n                      <th>{dateTime}</th>\n                      <td>{temp}</td>\n                      <td>{tempMax}</td>\n                      <td>{tempMin}</td>\n                      <td>{weather}</td>\n                    </tr>\n                  );\n                }) : null\n              }\n            </tbody>\n          </table>\n          \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}